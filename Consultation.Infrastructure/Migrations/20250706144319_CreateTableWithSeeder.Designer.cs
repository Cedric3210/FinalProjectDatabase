// <auto-generated />
using System;
using Consultation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultation.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250706144319_CreateTableWithSeeder")]
    partial class CreateTableWithSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.Property<int>("ActionLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionLogID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionLogID");

                    b.HasIndex("UsersId");

                    b.ToTable("ActionLog");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminID");

                    b.HasIndex("UsersId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Consultation.Domain.Bulletin", b =>
                {
                    b.Property<int>("BulletinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BulletinID"));

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notify")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BulletinID");

                    b.ToTable("Bulletin");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"));

                    b.Property<string>("Concern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisapprovedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndedTime")
                        .HasColumnType("time");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationNumber")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartedTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("NotificationNumber");

                    b.HasIndex("StudentID");

                    b.ToTable("ConsultationRequest");
                });

            modelBuilder.Entity("Consultation.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "CASE",
                            Description = "College of Arts and Sciences Education"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "CBAE",
                            Description = "College of Business Administration Education"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "CEE",
                            Description = "College of Engineering Education"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.Property<int>("EnrolledCourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrolledCourseID"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrolledCourseID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("StudentID");

                    b.ToTable("EnrolledCourse");
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyID"));

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacultyUMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacultyID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("UsersId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.Property<int>("FacultyScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyScheduleID"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("FacultyScheduleID");

                    b.HasIndex("FacultyID");

                    b.ToTable("FacultySchedule");
                });

            modelBuilder.Entity("Consultation.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationNumber"));

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationNumber");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolYearID"));

                    b.Property<int>("SchoolYearStatus")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("Year1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolYearID");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentUMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentID");

                    b.HasIndex("ProgramID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("UsersId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Consultation.Domain.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "273F528F-5330-411F-9C6B-01543D6249C3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "MyStudentAccount.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MYSTUDENTACCOUNT.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "MYSTUDENTACCOUNT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKadJU/M/fapx3hmZwubuGo2bBDgLQ76ComEUa8ZVEsP5dSrjXJNqQ8M32PtUS7MyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "1234",
                            UserName = "MyStudentAccount",
                            UserType = 1
                        },
                        new
                        {
                            Id = "53D8F920-EBEC-4DF3-8C53-21F6D123F0D9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "MyFacultyaccount.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MYFACULTYACCOUNT.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "MYFACULTYACCOUNT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiY5yxNbQpQKyl1cgm4e8hET6YlzCl6XDKjqQrD/3r9Ums0uCThVmVc2ZbgqF3fbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "3210",
                            UserName = "MyFacultyaccount",
                            UserType = 2
                        },
                        new
                        {
                            Id = "6B187E9D-FD71-4F1D-AFDF-EA1D91E818EF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "MyAdminaccount.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MYADMINACCOUNT.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "MYADMINACCOUNT",
                            PasswordHash = "AQAAAAIAAYagAAAAENh9d+kK9Hidhwvmdq5ybRMkOCXMoqvNC0lJSdbB4GCwp2f12WsW6m7fStIg832EAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "4445",
                            UserName = "MyAdminaccount",
                            UserType = 3
                        },
                        new
                        {
                            Id = "D0B26692-E380-4374-985F-239B56D06C20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "UndoyBagyo.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UNDOYBAGYO.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "UNDOYBAGYOUV63",
                            PasswordHash = "AQAAAAIAAYagAAAAENowKWHzGcfU+a6/iOsn1wp/0OKExfqNWvQQlMMmIxm278M+c/p86m7hrVmU5MQCUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "547343",
                            UserName = "UndoyBagyoUV63",
                            UserType = 1
                        },
                        new
                        {
                            Id = "1226920F-9508-44B3-845A-ABABBBCBCF5D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "mariasantos.6850@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIASANTOS.6850@UMINDANAO.EDU.PH",
                            NormalizedUserName = "MARIASANTOS",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJ8NNskGurN52olB502FZAJFdWzeAC5XL0He7298jaUmGtELCE61umHqzcZMt10bA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "6850",
                            UserName = "MariaSantos",
                            UserType = 1
                        },
                        new
                        {
                            Id = "0A52E15B-95E6-40FE-9110-9A44817BFF39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "josephcruz.8998@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSEPHCRUZ.8998@UMINDANAO.EDU.PH",
                            NormalizedUserName = "JOSEPHCRUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4I/I4qeD+Y28XC0Izk7IhRUoJCdgydITVe0neN8PlSKhWxeDK8HXO9hvs6Ny5K9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "8998",
                            UserName = "JosephCruz",
                            UserType = 1
                        },
                        new
                        {
                            Id = "78B4AF2A-672F-43C5-B819-5F0B407B7187",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "angelicagarcia.7971@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELICAGARCIA.7971@UMINDANAO.EDU.PH",
                            NormalizedUserName = "ANGELICAGARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXdVVIfWJCf2DLL62VXgwib/Ljmgc7tF4wxTpZVT+XPlLy7fTly0erEUP+aFYRAiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "7971",
                            UserName = "AngelicaGarcia",
                            UserType = 1
                        },
                        new
                        {
                            Id = "59CF8531-68E4-466B-BAEC-45305FE16A14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "marklopez.9241@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKLOPEZ.9241@UMINDANAO.EDU.PH",
                            NormalizedUserName = "MARKLOPEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjnm8GpXWPFGLBymeDjh6wYwmcFJBazFg8eDeXbgvQhZdPhcMVBSFID+I0IOw7mLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "9241",
                            UserName = "MarkLopez",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany("Faculties")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("SchoolYear");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("FacultySchedules")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.HasOne("Consultation.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.HasOne("Consultation.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany("Students")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Program");

                    b.Navigation("SchoolYear");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourses");

                    b.Navigation("FacultySchedules");
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Navigation("Faculties");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
